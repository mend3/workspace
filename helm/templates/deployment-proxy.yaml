{{- $_ := set .Values "component" "proxy" -}}
{{ include "dev-realm.deploymentHeader" . | nindent 0 }}
spec:
  replicas: {{ .Values.proxy.replicaCount | default 2 }}
  selector:
    matchLabels:
      app: {{ printf "%s-%s" .Release.Name .Values.component }}
  template:
    metadata:
      labels:
        app: {{ printf "%s-%s" .Release.Name .Values.component }}
        environment: {{ .Values.environment }}
    spec:
      nodeSelector:
        eks.amazonaws.com/nodegroup: nodejs
      tolerations:
        - key: 'dedicated'
          operator: 'Equal'
          value: 'nodejs'
          effect: 'NoSchedule'
      containers:
        - args:
            - node
            - dist/proxy/main.js
          name: {{ .Values.proxy.name }}
          image: "{{ .Values.awsAccountId }}.dkr.ecr.{{ .Values.awsRegion }}.amazonaws.com/{{ .Values.proxy.name }}:{{ .Values.proxy.tag }}"
          imagePullPolicy: Always
          env:
            - name: APP
              value: {{ .Values.component }}
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: sws-config
                  key: NODE_ENV
          ports:
            - containerPort: 8080
              protocol: TCP
              name: proxy
            - containerPort: 8081
              protocol: TCP
              name: metrics
          workingDir: /app
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /metrics
              port: 8081
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /metrics
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: proxy
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "8081"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      name: "proxy"
    - port: 8081
      targetPort: 8081
      name: "metrics"
  selector:
    app: {{ printf "%s-%s" .Release.Name .Values.component }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-proxy-egress
spec:
  podSelector:
    matchLabels:
      app: {{ printf "%s-%s" .Release.Name "proxy" }}  # Match proxy Pods
  policyTypes:
    - Egress
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0  # Allow traffic to the internet
      ports:
        - port: 80
          protocol: TCP
        - port: 443
          protocol: TCP
