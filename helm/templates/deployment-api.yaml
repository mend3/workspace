{{- $_ := set .Values "component" "api" -}}
{{ include "dev-realm.deploymentHeader" . | nindent 0 }}
spec:
  replicas: {{ .Values.api.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "dev-realm.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ include "dev-realm.fullname" . }}
        environment: {{ .Values.environment }}
    spec:
      nodeSelector:
        eks.amazonaws.com/nodegroup: nodejs
      tolerations:
        - key: 'dedicated'
          operator: 'Equal'
          value: 'nodejs'
          effect: 'NoSchedule'
      containers:
        - args:
            - node
            - dist/api/main.js
          name: {{ .Values.api.name }}
          image: "{{ .Values.awsAccountId }}.dkr.ecr.{{ .Values.awsRegion }}.amazonaws.com/{{ .Values.api.name }}:{{ .Values.api.tag }}"
          imagePullPolicy: Always
          env:
            - name: APP
              value: {{ .Values.component }}
            - name: REDIS_PORT
              value: "6379"
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: workspace-config
                  key: NODE_ENV
            # - name: LOKI_HOST
            #   valueFrom:
            #     configMapKeyRef:
            #       name: workspace-config
            #       key: LOKI_HOST
            - name: MONGO_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: workspace-secrets
                  key: MONGO_CONNECTION_STRING
            - name: COOKIE_SECRET
              valueFrom:
                secretKeyRef:
                  name: workspace-keys
                  key: COOKIE_SECRET
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: workspace-config
                  key: REDIS_HOST
          ports:
            - containerPort: 80
              protocol: TCP
              name: http
          workingDir: /app
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /health
              port: 80
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "dev-realm.fullname" . }}
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:{{ .Values.awsRegion }}:{{ .Values.awsAccountId }}:certificate/d6d72d80-f603-47cb-be7c-002793442724"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "80"
spec:
  type: LoadBalancer
  ports:
    - port: 443
      targetPort: 80
      protocol: TCP
      name: https
  selector:
    app: {{ include "dev-realm.fullname" . }}
