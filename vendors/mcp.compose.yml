include:
- graphiti/mcp_server/docker-compose.yml

services:
  mcp-crawl4ai-rag:
    build:
      context: mcp-crawl4ai-rag
      dockerfile: Dockerfile
    ports:
      - 8014:8000
    expose:
      - 8000
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.rag.rule=Host(`rag.workspace.com`)'
      - 'traefik.http.routers.rag.service=rag'
      - 'traefik.http.routers.rag.entrypoints=websecure'
      - 'traefik.http.routers.rag.tls=true'
      - 'traefik.http.services.rag.loadbalancer.server.port=8000'
    environment:
      USE_AGENTIC_RAG: False
      USE_HYBRID_SEARCH: True
      USE_RERANKING: True
      SUPABASE_URL: http://kong:8000
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      TRANSPORT: sse
      USE_KNOWLEDGE_GRAPH: true
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USER}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      HOST: 0.0.0.0
      PORT: 8000
    depends_on:
      kong:
        condition: service_started
  mcp-qdrant:
    build:
      context: mcp-qdrant
      dockerfile: Dockerfile
    container_name: mcp-qdrant
    expose:
      - 8000
    ports:
      - 8012:8000
    environment:
      QDRANT_URL: ${QDRANT_URL:-http://qdrant:6333}
      QDRANT_API_KEY: ${QDRANT_API_KEY:-}
      COLLECTION_NAME: ${WORKSPACE_COLLECTION_NAME}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL}
      EMBEDDING_PROVIDER: fastembed
      QDRANT_VERIFY_SSL: False
    depends_on:
      qdrant:
        condition: service_started
  mcp-fetch:
    build:
      context: mcp-servers/src/fetch
      dockerfile: Dockerfile
      args:
        - NODE_VERSION=${NODE_VERSION}
    environment:
      NODE_ENV: production
    expose:
      - 8000
    ports:
      - 8008:8000
  mcp-git:
    build:
      context: mcp-servers/src/git
      dockerfile: Dockerfile
      args:
        - NODE_VERSION=${NODE_VERSION}
    environment:
      NODE_ENV: production
    expose:
      - 8000
    ports:
      - 809:8000
  mcp-time:
    build:
      context: mcp-servers/src/time
      dockerfile: Dockerfile
      args:
        - NODE_VERSION=${NODE_VERSION}
    environment:
      - LOCAL_TIMEZONE=UTC
      - NODE_ENV=production
    expose:
      - 8000
    ports:
      - 8010:8000

