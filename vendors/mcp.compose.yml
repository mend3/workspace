services:
  mcp-bravesearch:
    image: mcp/brave-search
    environment:
      - BRAVE_API_KEY=${BRAVE_API_KEY}
    container_name: mcp-bravesearch
    tty: true
  mcp-crawl4ai-rag:
    build:
      context: mcp-crawl4ai-rag
      dockerfile: Dockerfile
    container_name: mcp-crawl4ai-rag
    expose:
      - 8000
    environment:
      USE_AGENTIC_RAG: False
      USE_HYBRID_SEARCH: True
      USE_RERANKING: True
      SUPABASE_URL: http://kong:8000
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_KEY}
      TRANSPORT: sse
      USE_KNOWLEDGE_GRAPH: true
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: ${NEO4J_USER}
      NEO4J_PASSWORD: ${NEO4J_PASSWORD}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      HOST: 0.0.0.0
      PORT: 8000
  mcp-qdrant:
    build:
      context: mcp-qdrant
      dockerfile: Dockerfile
    container_name: mcp-qdrant
    expose:
      - 8000
    environment:
      QDRANT_URL: ${QDRANT_URL:-http://qdrant:6333}
      QDRANT_API_KEY: ${QDRANT_API_KEY}
      COLLECTION_NAME: ${WORKSPACE_COLLECTION_NAME}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL}
      EMBEDDING_PROVIDER: ${EMBEDDING_PROVIDER}
      QDRANT_VERIFY_SSL: False
    depends_on:
      - qdrant
  mcp-filesystem:
    build:
      context: mcp-servers
      dockerfile: src/filesystem/Dockerfile
      target: release
  mcp-sequentialthinking:
    build:
      context: mcp-servers
      dockerfile: src/sequentialthinking/Dockerfile
      target: release
  mcp-memory:
    build:
      context: mcp-servers
      dockerfile: src/memory/Dockerfile
      target: release
  mcp-graphiti:
    build:
      context: graphiti/mcp_server
      dockerfile: Dockerfile
    env_file:
      - path: .env
        required: false
    expose:
      - 8000
    depends_on:
      neo4j:
        condition: service_started
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MODEL_NAME=${MODEL_NAME:-gpt-4o-mini}
      - PATH=/root/.local/bin:${PATH}
    command: ["uv", "run", "graphiti_mcp_server.py", "--transport", "sse"]
