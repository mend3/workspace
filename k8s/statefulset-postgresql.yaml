apiVersion: v1
kind: PersistentVolume
metadata:
  name: storage-pv-postgresql
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: sws-storage
  local:
    path: /mnt/storage/postgresql
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
            - postgresql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-pvc
  labels:
    app: postgresql
spec:
  storageClassName: sws-storage
  volumeName: storage-pv-postgresql
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  labels:
    app: postgresql
spec:
  serviceName: postgresql
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      nodeSelector:
        eks.amazonaws.com/nodegroup: postgresql
      tolerations:
        - key: dedicated
          operator: Equal
          value: postgresql
          effect: NoSchedule
      containers:
      - name: postgresql
        image: postgres
        ports:
          - containerPort: 5432
        env:
          - name: PGUSER
            valueFrom:
              secretKeyRef:
                name: sws-secrets
                key: POSTGRES_USER
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: sws-secrets
                key: POSTGRES_USER
          - name: PGPASSWORD
            valueFrom:
              secretKeyRef:
                name: sws-secrets
                key: POSTGRES_PASSWORD
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: sws-secrets
                key: POSTGRES_PASSWORD
          - name: POSTGRES_DB
            valueFrom:
              configMapKeyRef:
                name: sws-config
                key: POSTGRES_DB
          - name: PGDATABASE
            valueFrom:
              configMapKeyRef:
                name: sws-config
                key: POSTGRES_DB
        livenessProbe:
          exec:
            command: ['pg_isready', '-U', '$(POSTGRES_USER)', '-d', '$(POSTGRES_DB)', '-h', 'localhost']
          initialDelaySeconds: 10
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 5
        readinessProbe:
          exec:
            command: ['pg_isready', '-U', '$(POSTGRES_USER)', '-d', '$(POSTGRES_DB)', '-h', 'localhost']
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            cpu: '500m'
            memory: '1Gi'
          limits:
            cpu: '1'
            memory: '2Gi'
        volumeMounts:
        # - name: postgresql-data
        #   mountPath: /var/lib/postgresql/data
        - name: postgresql-config
          mountPath: /etc/postgresql/postgresql.conf
          subPath: postgresql.conf
        - name: postgresql-config
          mountPath: /etc/postgresql/pg_hba.conf
          subPath: pg_hba.conf
        - name: migrations
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      # - name: postgresql-data
      #   persistentVolumeClaim:
      #     claimName: postgresql-pvc
      - name: postgresql-config
        configMap:
          name: postgresql-config
      - name: migrations
        configMap:
          name: postgresql-migrations
---
apiVersion: v1
kind: Service
metadata:
  name: postgresql
  namespace: sws
  labels:
    app: postgresql
spec:
  ports:
  - port: 5432
    targetPort: 5432
  selector:
    app: postgresql
  type: ClusterIP

