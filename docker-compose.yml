include:
  - vendors/ollama.compose.yml
  - vendors/docker-compose.yml
  - shared/homelab.compose.yml
  - shared/mcp/docker-compose.yml
  - shared/monitor.compose.yml

services:
  traefik:
    image: traefik
    container_name: traefik
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --metrics.prometheus=true
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
      - --providers.docker=true
      - --providers.docker.watch
      - --providers.docker.exposedbydefault=false
      - --api.dashboard=true
      - --certificatesresolvers.selfsigned.acme.tlschallenge=false
      - --log.level=INFO
      - --accesslog=true
      - --providers.file.filename=/etc/traefik/tls.yml
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - .docker/traefik/config.yaml:/etc/traefik/traefik.yaml:ro
      - .docker/traefik/tls.yaml:/etc/traefik/tls.yaml:ro
      - .docker/traefik/certs:/certs:ro
    labels:
      traefik.enable: true
      traefik.http.routers.traefik.rule: Host(`dashboard.workspace.com`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.entrypoints: web
      traefik.http.services.traefik.loadbalancer.server.port: 8080
    logging:
      options:
        max-size: '10m'
        max-file: '3'

  ai-context:
    platform: linux/amd64
    container_name: ai-context
    working_dir: /app
    build:
      context: ./shared/python
      dockerfile: Dockerfile
      args:
        - VECTOR_TOOL=vector_generator
    entrypoint: /bin/sh
    command:
      - '-c'
      - >
        set -e;
        sleep 3;
        python -m generators.vector_from_files --root /brain --store qdrant --collection workspace_embedding --ignore-dirs "vendors,dist,build,.artifacts,tmp,__pycache__,node_modules,*_ignore,.cache" --ignore-files "package-lock.json,yarn.lock,pnpm-lock.yaml,.env"
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - EMBEDDING_PROVIDER=${EMBEDDING_PROVIDER}
      - QDRANT_URL=http://qdrant:6333
    labels:
      logging: 'enabled'
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    volumes:
      - ./brain:/brain:ro
    depends_on:
      qdrant:
        condition: service_healthy
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  mysql:
    restart: unless-stopped
    image: mysql/mysql-server:${MYSQL_VERSION}
    command: ['--default-authentication-plugin', 'mysql_native_password']
    pid: host
    expose:
      - 3306
    ports:
      - '3306:3306'
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    volumes:
      - mysql_data:/var/lib/mysql

  postgres:
    image: postgres:${POSTGRES_VERSION:-latest}
    restart: unless-stopped
    user: postgres
    environment:
      TZ: America/Sao_Paulo
      PGUSER: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 2s
      timeout: 5s
      retries: 10
    ports:
      - 5432:5432
    expose:
      - 5432
    volumes:
      - postgres_data:/var/lib/postgresql
  redis:
    platform: linux/amd64
    image: redislabs/rejson:2.0.6
    command: redis-server --loadmodule /usr/lib/redis/modules/rejson.so --loadmodule /usr/lib/redis/modules/redisearch.so --appendonly yes --maxclients 10000 --timeout 0 --tcp-keepalive 300 --save
    environment:
      - TZ=America/Sao_Paulo
      - REDISTIMESERIES_ARGS="RETENTION_POLICY=20"
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 3s
      timeout: 10s
      retries: 10
    volumes:
      - redis_data:/data
    expose:
      - 6379
    logging:
      driver: 'json-file'
      options:
        max-size: '1m'
        max-file: '1'

  mongo:
    platform: linux/amd64
    image: mongo
    restart: unless-stopped
    expose:
      - 27017
    environment:
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE}
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    healthcheck:
      test: echo $(mongo --eval 'db.runCommand("ping").ok')
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
  pgvector:
    image: pgvector/pgvector:pg17
    environment:
      TZ: America/Sao_Paulo
      PGUSER: ${PGVECTOR_USER}
      POSTGRES_USER: ${PGVECTOR_USER}
      POSTGRES_PASSWORD: ${PGVECTOR_PASSWORD}
      POSTGRES_DB: ${PGVECTOR_DATABASE}
    expose:
      - 5432
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready']
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - pgvector_data:/var/lib/postgresql/data
      - .docker/pgvector/:/docker-entrypoint-initdb.d/:ro
  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - QDRANT__GPU__INDEXING=true
      - EMBEDDING_PROVIDER=fastembed
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - 6333:6333
      - 6334:6334
    expose:
      - 6333
      - 6334
    restart: unless-stopped
    healthcheck:
      test:
        - CMD-SHELL
        - bash -c ':> /dev/tcp/127.0.0.1/6333' || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.qdrant.rule=Host(`qdrant.workspace.com`)'
      - 'traefik.http.routers.qdrant.service=qdrant'
      - 'traefik.http.routers.qdrant.entrypoints=web'
      - 'traefik.http.services.qdrant.loadbalancer.server.port=6333'
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]


volumes:
  mysql_data:
  postgres_data:
  redis_data:
  pgvector_data:
  qdrant_data:

