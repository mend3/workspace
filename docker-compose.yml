name: ${NAMESPACE:-$USER}

services:
  traefik:
    image: traefik
    container_name: traefik
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --metrics.prometheus=true
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
      - --providers.docker=true
      - --providers.docker.watch
      - --providers.docker.exposedbydefault=false
      - --api.dashboard=true
      - --certificatesresolvers.selfsigned.acme.tlschallenge=false
      - --log.level=INFO
      - --accesslog=true
      - --providers.file.filename=/etc/traefik/tls.yml
    ports:
      - 80:80
      - 443:443
    networks:
      - internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - .docker/traefik/config.yaml:/etc/traefik/traefik.yaml:ro
      - .docker/traefik/certs:/certs:ro
    labels:
      traefik.enable: true
      traefik.http.routers.traefik.rule: Host(`dashboard.workspace.com`)
      traefik.http.routers.traefik.service: api@internal
      traefik.http.routers.traefik.entrypoints: web
      traefik.http.services.traefik.loadbalancer.server.port: 8080
    logging:
      options:
        max-size: '10m'
        max-file: '3'

  postgres:
    image: postgres:${POSTGRES_VERSION:-latest}
    restart: unless-stopped
    user: postgres
    environment:
      TZ: America/Sao_Paulo
      PGUSER: postgres
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 2s
      timeout: 5s
      retries: 10
    expose:
      - 5432/tcp
    networks:
      - internal
    volumes:
      - postgres_data:/var/lib/postgresql/data
  redis:
    platform: linux/amd64
    image: redislabs/rejson:2.0.6
    command: redis-server --loadmodule /usr/lib/redis/modules/rejson.so --loadmodule /usr/lib/redis/modules/redisearch.so --appendonly yes --maxclients 10000 --timeout 0 --tcp-keepalive 300 --save
    environment:
      - TZ=America/Sao_Paulo
      - REDISTIMESERIES_ARGS="RETENTION_POLICY=20"
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 3s
      timeout: 10s
      retries: 10
    volumes:
      - redis_data:/data
    expose:
      - 6379/tcp
    ports:
      - 6379:6379
    networks:
      - internal
    logging:
      driver: 'json-file'
      options:
        max-size: '1m'
        max-file: '1'
  mysql:
    restart: unless-stopped
    image: mysql/mysql-server:${MYSQL_VERSION}
    command: ['--default-authentication-plugin', 'mysql_native_password']
    pid: host
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    volumes:
      - ./.docker/mysql/mysqld.cnf:/etc/mysql/conf.d/mysqld.cnf
      - ./.docker/mysql/data:/var/lib/mysql
      - ./.docker/mysql/init:/docker-entrypoint-initdb.d/
    networks:
      - internal
  mongo:
    platform: linux/amd64
    image: mongo:4
    restart: unless-stopped
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE}
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    healthcheck:
      test: echo $(mongo --eval 'db.runCommand("ping").ok')
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    volumes:
      - mongodb_data:/data/db
    networks:
      - internal
  pgvector:
    image: pgvector/pgvector:pg17
    container_name: pgvector-db
    environment:
      TZ: America/Sao_Paulo
      PGUSER: ${PGVECTOR_USER}
      POSTGRES_USER: ${PGVECTOR_USER}
      POSTGRES_PASSWORD: ${PGVECTOR_PASSWORD}
      POSTGRES_DB: ${PGVECTOR_DATABASE}
    expose:
      - 5432/tcp
    networks:
      - internal
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready']
      interval: 1s
      timeout: 5s
      retries: 10
    volumes:
      - pgvector_data:/var/lib/postgresql/data
      - ./.docker/postgres/pgvector/:/docker-entrypoint-initdb.d/:ro
  pinecone:
    image: ghcr.io/pinecone-io/pinecone-local:latest
    container_name: pinecone
    expose:
      - 5081
    environment:
      - PORT=5081
      - PINECONE_HOST=${PINECONE_HOST:-localhost}
      - PINECONE_API_KEY=${PINECONE_API_KEY:-apilocal}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT:-us-east1-gcp}
    networks:
      - internal
    volumes:
      - pinecone_data:/root/.pinecone
  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - QDRANT__GPU__INDEXING=true
      - EMBEDDING_PROVIDER=${EMBEDDING_PROVIDER}
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - '6333:6333'
    expose:
      - 6333
    restart: unless-stopped
    networks:
      - internal
    healthcheck:
      test:
        - CMD-SHELL
        - bash -c ':> /dev/tcp/127.0.0.1/6333' || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  localstack:
    image: localstack/localstack:3.2.0
    environment:
      - SERVICES=s3
      - PERSISTENCE=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test:
        - CMD
        - curl
        - '-s'
        - localhost:4566/_localstack/init
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - internal

networks:
  internal:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  pgvector_data:
  pinecone_data:
  qdrant_data:
  mongodb_data:
