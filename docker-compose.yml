name: ${NAMESPACE:-workspace}

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['internal']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
  links:
    - postgres

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['internal']
  restart: unless-stopped
  ports:
    - 11434:11434
  environment:
    - VECTOR_STORE_PATH=/app/vector_store
    - NVIDIA_VISIBLE_DEVICES=all
  volumes:
    - ollama_data:/root/.ollama
    - ./.tmp/.ollama:/root/.ollama
    - ./.docker/ollama:/code

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  container_name: ollama-pull-llama
  networks:
    - internal
  volumes:
    - ollama_data:/root/.ollama
  entrypoint: /bin/sh
  command:
    - '-c'
    - "sleep 3; \
      OLLAMA_HOST=ollama:11434 ollama pull qwen2.5:7b;\
      OLLAMA_HOST=ollama:11434 ollama pull all-minilm:l6-v2;\
      OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text"

services:
  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - '-c'
      - 'n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows'
    volumes:
      - ./.docker/n8n/backup:/backup:ro
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_data:/home/node/.n8n
      - ./.docker/n8n/backup:/backup
      - ./.docker/n8n/shared:/data/shared
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully
    networks:
      - internal

  ollama:
    <<: *service-ollama
    profiles: ['cpu', 'gpu']
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-cpu:
    profiles: ['cpu']
    <<: *service-ollama

  ollama-gpu:
    profiles: ['gpu']
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
  ollama-pull-llama-cpu:
    profiles: ['cpu']
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ['gpu']
    <<: *init-ollama
    depends_on:
      - ollama-gpu
  open-webui:
    image: ghcr.io/open-webui/open-webui:cuda
    container_name: open-webui
    runtime: nvidia
    ports:
      - '3000:8080'
    environment:
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://ollama:11434}
      - NVIDIA_VISIBLE_DEVICES=all
    depends_on:
      - ollama
    volumes:
      - openwebui_data:/app/backend/data
    networks:
      - internal
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    deploy:
      restart_policy:
        condition: always
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
  postgres:
    image: postgres
    restart: always
    user: postgres
    environment:
      TZ: America/Sao_Paulo
      PGUSER: ${POSTGRES_USER}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: n8n
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d n8n
      interval: 2s
      timeout: 5s
      retries: 10
    networks:
      - internal
    expose:
      - 5432
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - .docker/postgres/sws/:/docker-entrypoint-initdb.d/:ro
  redis:
    platform: linux/amd64
    image: redislabs/rejson:2.0.6
    command: redis-server --loadmodule /usr/lib/redis/modules/rejson.so --loadmodule /usr/lib/redis/modules/redisearch.so --appendonly yes --maxclients 10000 --timeout 0 --tcp-keepalive 300 --save
    environment:
      - TZ=America/Sao_Paulo
      - REDISTIMESERIES_ARGS="RETENTION_POLICY=20"
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    volumes:
      - redis_data:/data
    ports:
      - 6379:6379
    networks:
      - internal
    extra_hosts:
      - host.docker.internal:host-gateway
  mysql:
    restart: always
    image: mysql/mysql-server:${MYSQL_VERSION}
    command: ['--default-authentication-plugin', 'mysql_native_password']
    pid: host
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    volumes:
      - ./.docker/mysql/mysqld.cnf:/etc/mysql/conf.d/mysqld.cnf
      - ./.docker/mysql/data:/var/lib/mysql
      - ./.docker/mysql/init:/docker-entrypoint-initdb.d/
    networks:
      - internal
  mongo:
    platform: linux/amd64
    image: mongo:4
    restart: always
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE}
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    healthcheck:
      test: echo $(mongo --eval 'db.runCommand("ping").ok')
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - internal

networks:
  internal:
    driver: bridge

volumes:
  n8n_data:
  ollama_data:
  openwebui_data:
  postgres_data:
  redis_data:
