---
description: Ensure the agent actively reads local files from core development folders (monorepos, browser tools, Python libs, MCP vendors).
globs: ["browser/**/*.*","projects/**/*.*","python/**/*.*","vendors/**/*.*"]
alwaysApply: true
---

You are working in the user workspace.

Operational System details:

- Distributor ID: Ubuntu
- Description:    Ubuntu 22.04.5 LTS
- Release:        22.04
- Codename:       jammy

Node Version: 22.15.0
Python Version: 3.12

This workspace includes key development zones the agent must understand:

Inside `cli/` directory there are several utilities scripts, ready to be used on shell terminal.
Read the file before running to see if any changes would be made to the user's files. If so, asks for permission before running the script.

When in need of using MCP servers or connect to docker services, look for the main docker-compose, it already includes nested fiels that mount the entire services cluster.

Always start by calling the `sequential-thinking` MCP server to help understanding what to do.

Always check for running docker composes to find out if a service is already available to use.

## 1. Brain (brain/)
- Useful for referencing vector stores, RAG tools, LLM APIs, LangChain integrations, Supabase modules, etc.
- Documentations about technologies used in this workspace.
- Ebooks about technology, devops, etc.
- AI Agent templates for n8n.

## 2. External Open Source Repos (vendors/)
- Repositories inside `vendors/` are AI/LLM/MCP related.
- Prefer reading real code/documentation in these repos over assumptions.

## 3. User’s GitHub Projects (projects/)
- These represent public or shared projects by the user.
- Look inside for reusable logic, patterns, or domain-specific functionality.
- Prioritize user-authored content over external templates.

## 4. Browser Automation Tools (browser/)
- This folder contains automation pipelines using Puppeteer, Playwright, or extensions.
- Understand the flow in `browser/use/`, `browser/extension/`, and UI elements in `browser/ui/`.
- Inspect the `docker-compose.yml` for service orchestration.

## 5. Shared Projects (shared/)
- This folder contains open source projects created by the user, public on github.
- Contains shared docker-compose files, that also acts as templates.
  - MCP (Model Context Protocol Servers - mysql, puppeteer, etc)
  - Homelab (Homarr, Firefly, Home Assistant, etc)
  - Monitoring (Grafana, Prometheus, etc)
  - Modules under `python/` implement local services, scrapers, generators, and vector store interfaces.
  - Respect project layout and internal module separation.

## General Rules
- Always read actual files before answering questions about these components.
- Never guess structure or behavior if it can be found in source.
- Quote or summarize only the relevant sections.
- Be aware of relationships across folders — e.g., how `python/` may use models from `vendors/`, or how `browser/` ties into `projects/`.

Your tasks:

- Always consult relevant files from these directories before answering questions or generating code.
- Use `nx.json`, `project.json` and `workspace.json` to understand project structure and configuration.
- Use `package.json`, `tsconfig*.json`, `.env*`, and `jest.config.*` to gather context on build, environment, and tooling.
- Look inside `apps/` and `packages/` to find source code and business logic.
- Infer the relevant project if the user doesn’t specify it.
- Prefer reading real files over guessing or hallucinating content.

Only quote or include code snippets when directly relevant. Otherwise, summarize long files.

Avoid generating answers that are inconsistent with the actual content of the monorepos.
